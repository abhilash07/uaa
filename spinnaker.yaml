---
# Source: spinnaker/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: spinnaker-minio
  labels:
    app: minio
    chart: minio-1.6.3
    release: spinnaker
    heritage: Tiller
type: Opaque
data:
  accesskey: c3Bpbm5ha2VyYWRtaW4=
  secretkey: c3Bpbm5ha2VyYWRtaW4=
---
# Source: spinnaker/charts/redis/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: spinnaker-redis
  labels:
    app: redis
    chart: redis-3.8.0
    release: "spinnaker"
    heritage: "Tiller"
type: Opaque
data:
  redis-password: "cGFzc3dvcmQ="
---
# Source: spinnaker/templates/secrets/registry.yaml

apiVersion: v1
kind: Secret
metadata:
  name: spinnaker-spinnaker-registry
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
    component: clouddriver
type: Opaque
data:
  dockerhub: ""

---
# Source: spinnaker/charts/minio/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spinnaker-minio
  labels:
    app: minio
    chart: minio-1.6.3
    release: spinnaker
    heritage: Tiller
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }
    
    # Try connecting to Minio instance
    connectToMinio
    # Create the bucket
    createBucket bucket none false
    
  config.json: |-
    {
      "version": "26",
      "credential": {
        "accessKey": "spinnakeradmin",
        "secretKey": "spinnakeradmin"
      },
      "region": "us-east-1",
      "browser": "on",
      "worm": "off",
      "domain": "",
      "storageclass": {
        "standard": "",
        "rrs": ""
      },
      "cache": {
        "drives": [],
        "expiry": 90,
        "maxuse": 80,
        "exclude": []
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": null,
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": "",
            "reconnectInterval": 0,
            "keepAliveInterval": 0
          }
        }
      }
    }
---
# Source: spinnaker/templates/configmap/halyard-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spinnaker-spinnaker-halyard-config
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
data:
  install.sh: |
    #!/bin/bash

    # Wait for the Hal daemon to be ready
    export DAEMON_ENDPOINT=http://spinnaker-spinnaker-halyard:8064
    export HAL_COMMAND="hal --daemon-endpoint $DAEMON_ENDPOINT"
    until $HAL_COMMAND --ready; do sleep 10 ; done

    bash -xe /opt/halyard/scripts/config.sh

    $HAL_COMMAND deploy apply
  clean.sh: |
    export HAL_COMMAND='hal --daemon-endpoint http://spinnaker-spinnaker-halyard:8064'
    $HAL_COMMAND deploy clean -q
  config.sh: |
    # Spinnaker version
    $HAL_COMMAND config version edit --version 1.9.1

    # Storage
    
    echo spinnakeradmin | $HAL_COMMAND config storage s3 edit --endpoint http://spinnaker-minio:9000 --access-key-id spinnakeradmin --secret-access-key --bucket spinnaker
    $HAL_COMMAND config storage edit --type s3
    
    
    
    

    # Docker Registry
    $HAL_COMMAND config provider docker-registry enable

    if $HAL_COMMAND config provider docker-registry account get dockerhub; then
      PROVIDER_COMMAND='edit'
    else
      PROVIDER_COMMAND='add'
    fi

    CREDS=""
    

    $HAL_COMMAND config provider docker-registry account $PROVIDER_COMMAND dockerhub --address index.docker.io \
        ${CREDS}  --repositories library/alpine,library/ubuntu,library/centos,library/nginx

    $HAL_COMMAND config provider kubernetes enable

    if $HAL_COMMAND config provider kubernetes account get default; then
      PROVIDER_COMMAND='edit'
    else
      PROVIDER_COMMAND='add'
    fi

    $HAL_COMMAND config provider kubernetes account $PROVIDER_COMMAND default --docker-registries dockerhub \
                --context default --service-account true \
                 --omit-namespaces=kube-system,kube-public --provider-version v2
    $HAL_COMMAND config deploy edit --account-name default --type distributed \
                           --location spinnaker
    # Use Deck to route to Gate
    $HAL_COMMAND config security api edit --no-validate --override-base-url /gate
    $HAL_COMMAND config features edit --artifacts true
    $HAL_COMMAND config features edit --jobs true

---
# Source: spinnaker/charts/minio/templates/pvc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: spinnaker-minio
  labels:
    app: minio
    chart: minio-1.6.3
    release: spinnaker
    heritage: Tiller
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"

---
# Source: spinnaker/templates/rbac/halyard-sa.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: spinnaker-spinnaker-halyard
  namespace: spinnaker
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"

---
# Source: spinnaker/templates/rbac/spinnaker-sa.yaml
# In the case of a local cluster Spinnaker needs
# to be able to deploy to all namespaces in the cluster.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spinnaker-spinnaker-spinnaker
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- namespace: spinnaker
  kind: ServiceAccount
  # Clouddriver does not currently allow config of its
  # service account.
  name: default

---
# Source: spinnaker/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spinnaker-spinnaker-halyard
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- namespace: spinnaker
  kind: ServiceAccount
  name: spinnaker-spinnaker-halyard

---
# Source: spinnaker/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: spinnaker-minio
  labels:
    app: minio
    chart: minio-1.6.3
    release: spinnaker
    heritage: Tiller
spec:
  type: ClusterIP
  clusterIP: None
  
  ports:
    - name: service
      port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app: minio
    release: spinnaker

---
# Source: spinnaker/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: spinnaker-redis-master
  labels:
    app: redis
    chart: redis-3.8.0
    release: "spinnaker"
    heritage: "Tiller"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: "spinnaker"
    role: master

---
# Source: spinnaker/templates/services/halyard.yaml
apiVersion: v1
kind: Service
metadata:
  name: spinnaker-spinnaker-halyard
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
    component: halyard
spec:
  ports:
  - port: 8064
    name: daemon
  clusterIP: None
  selector:
    app: spinnaker-spinnaker
    component: halyard

---
# Source: spinnaker/charts/minio/templates/deployment.yaml

apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: spinnaker-minio
  labels:
    app: minio
    chart: minio-1.6.3
    release: spinnaker
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: minio
      release: spinnaker
  template:
    metadata:
      name: spinnaker-minio
      labels:
        app: minio
        release: spinnaker
    spec:
      containers:
        - name: minio
          image: "minio/minio:RELEASE.2018-08-25T01-56-38Z"
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", 
          "-ce", 
          "cp /tmp/config.json /root/.minio/ && 
          /usr/bin/docker-entrypoint.sh minio -C /root/.minio/ server /export" ]
          volumeMounts:
            - name: export
              mountPath: /export
            - name: minio-server-config
              mountPath: "/tmp/config.json"
              subPath: config.json
            - name: minio-config-dir
              mountPath: /root/.minio/
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: spinnaker-minio
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: spinnaker-minio
                  key: secretkey
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
            
      volumes:
        - name: export
          persistentVolumeClaim:
            claimName: spinnaker-minio
        - name: minio-server-config
          configMap:
            name: spinnaker-minio
        - name: minio-user
          secret:
            secretName: spinnaker-minio
        - name: minio-config-dir
          emptyDir: {}

---
# Source: spinnaker/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: spinnaker-redis-master
  labels:
    app: redis
    chart: redis-3.8.0
    release: "spinnaker"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      release: "spinnaker"
      chart: redis-3.8.0
      role: master
      app: redis
  serviceName: "redis-master"
  template:
    metadata:
      labels:
        release: "spinnaker"
        chart: redis-3.8.0
        role: master
        app: redis
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: "default"
      containers:
      - name: spinnaker-redis
        image: "docker.io/bitnami/redis:4.0.11-debian-9"
        imagePullPolicy: "Always"
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: spinnaker-redis
              key: redis-password
        - name: REDIS_DISABLE_COMMANDS
          value: FLUSHDB,FLUSHALL
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - redis-cli
            - ping
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
            - redis-cli
            - ping
        resources:
          null
          
        volumeMounts:
        - name: redis-data
          mountPath: /bitnami/redis/data
          subPath: 
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: "redis"
          chart: redis-3.8.0
          component: "master"
          release: "spinnaker"
          heritage: "Tiller"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
  updateStrategy:
    type: OnDelete

---
# Source: spinnaker/templates/statefulsets/halyard.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spinnaker-spinnaker-halyard
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
spec:
  serviceName: spinnaker-spinnaker-halyard
  replicas: 1
  selector:
    matchLabels:
      app: "spinnaker-spinnaker"
      release: "spinnaker"
      component: halyard
  template:
    metadata:
      labels:
        app: "spinnaker-spinnaker"
        heritage: "Tiller"
        release: "spinnaker"
        chart: "spinnaker-1.1.5"
        component: halyard
    spec:
      serviceAccountName: spinnaker-spinnaker-halyard
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      - name: "create-halyard-local"
        image: gcr.io/spinnaker-marketplace/halyard:1.9.1
        command:
        - bash
        - -c
        - |
          # Override Halyard daemon's listen address
          cp /opt/halyard/config/* /tmp/config && \
          printf 'server.address: 0.0.0.0\n' > /tmp/config/halyard-local.yml && \
          # Use Redis deployed via the dependent Helm chart
          mkdir -p /tmp/spinnaker/.hal/default/service-settings && \
          printf 'overrideBaseUrl: redis://:password@spinnaker-redis-master:6379\nskipLifeCycleManagement: true\n' > /tmp/spinnaker/.hal/default/service-settings/redis.yml && \
          # Route the /gate path of Deck to Gate
          printf 'env:\n  API_HOST: http://spin-gate.spinnaker:8084/\n' > /tmp/spinnaker/.hal/default/service-settings/deck.yml
        volumeMounts:
        - name: halyard-config
          mountPath: /tmp/config
        - name: halyard-home
          mountPath: /tmp/spinnaker
      volumes:
      - name: reg-secrets
        secret:
          secretName: spinnaker-spinnaker-registry
      - name: halyard-config
        emptyDir: {}
      containers:
      - name: halyard
        image: gcr.io/spinnaker-marketplace/halyard:1.9.1
        ports:
        - containerPort: 8064
          name: daemon
        volumeMounts:
        - name: halyard-home
          mountPath: /home/spinnaker
        - name: halyard-config
          mountPath: /opt/halyard/config
        - name: reg-secrets
          mountPath: /opt/registry/passwords
  volumeClaimTemplates:
  - metadata:
      name: halyard-home
      labels:
        app: "spinnaker-spinnaker"
        heritage: "Tiller"
        release: "spinnaker"
        chart: "spinnaker-1.1.5"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
# Source: spinnaker/templates/hooks/cleanup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "spinnaker-spinnaker-cleanup-using-hal"
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
    component: halyard
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  template:
    metadata:
      labels:
        app: "spinnaker-spinnaker"
        heritage: "Tiller"
        release: "spinnaker"
        chart: "spinnaker-1.1.5"
        component: halyard
    spec:
      restartPolicy: OnFailure
      volumes:
      - name: halyard-config
        configMap:
          name: spinnaker-spinnaker-halyard-config
      containers:
      - name: halyard-install
        image: gcr.io/spinnaker-marketplace/halyard:1.9.1
        volumeMounts:
        - name: halyard-config
          mountPath: /opt/halyard/scripts
        command:
        - bash
        - -xe
        - "/opt/halyard/scripts/clean.sh"

---
# Source: spinnaker/templates/hooks/install-using-hal.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "spinnaker-install-using-hal"
  labels:
    app: "spinnaker-spinnaker"
    heritage: "Tiller"
    release: "spinnaker"
    chart: "spinnaker-1.1.5"
    component: halyard
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
spec:
  template:
    metadata:
      labels:
        app: "spinnaker-spinnaker"
        heritage: "Tiller"
        release: "spinnaker"
        chart: "spinnaker-1.1.5"
        component: halyard
    spec:
      restartPolicy: OnFailure
      volumes:
      - name: halyard-config
        configMap:
          name: spinnaker-spinnaker-halyard-config
      containers:
      - name: halyard-install
        image: gcr.io/spinnaker-marketplace/halyard:1.9.1
        volumeMounts:
        - name: halyard-config
          mountPath: /opt/halyard/scripts
        command:
        - bash
        - -xe
        - "/opt/halyard/scripts/install.sh"

---
# Source: spinnaker/charts/minio/templates/ingress.yaml


---
# Source: spinnaker/charts/minio/templates/networkpolicy.yaml


---
# Source: spinnaker/charts/minio/templates/post-install-create-bucket-job.yaml


---
# Source: spinnaker/charts/minio/templates/statefulset.yaml


---
# Source: spinnaker/charts/redis/templates/configmap.yaml


---
# Source: spinnaker/charts/redis/templates/metrics-deployment.yaml


---
# Source: spinnaker/charts/redis/templates/metrics-svc.yaml


---
# Source: spinnaker/charts/redis/templates/networkpolicy.yaml


---
# Source: spinnaker/charts/redis/templates/redis-role.yaml

---
# Source: spinnaker/charts/redis/templates/redis-rolebinding.yaml

---
# Source: spinnaker/charts/redis/templates/redis-serviceaccount.yaml

---
# Source: spinnaker/charts/redis/templates/redis-slave-deployment.yaml


---
# Source: spinnaker/charts/redis/templates/redis-slave-svc.yaml


---
# Source: spinnaker/templates/configmap/additional-configmaps.yaml


---
# Source: spinnaker/templates/configmap/additional-scripts.yaml


---
# Source: spinnaker/templates/hooks/expose-nodeports.yaml


---
# Source: spinnaker/templates/ingress/deck.yaml


---
# Source: spinnaker/templates/ingress/gate.yaml


---
# Source: spinnaker/templates/secrets/additional-secrets.yaml


---
# Source: spinnaker/templates/secrets/gcs.yaml


---
# Source: spinnaker/templates/secrets/s3.yaml


